diff --git a/drivers/block/loop.c b/drivers/block/loop.c
index ffbe792410d1..431bc3698935 100644
--- a/drivers/block/loop.c
+++ b/drivers/block/loop.c
@@ -89,6 +89,13 @@ static DEFINE_MUTEX(loop_ctl_mutex);
 static int max_part;
 static int part_shift;
 
+int loop_max_part(void)
+{
+	return max_part;
+}
+
+EXPORT_SYMBOL(loop_max_part);
+
 static int transfer_xor(struct loop_device *lo, int cmd,
 			struct page *raw_page, unsigned raw_off,
 			struct page *loop_page, unsigned loop_off,
diff --git a/init/do_mounts.c b/init/do_mounts.c
index 9634ecf3743d..8ee39437568c 100644
--- a/init/do_mounts.c
+++ b/init/do_mounts.c
@@ -25,11 +25,13 @@
 #include <linux/nfs_mount.h>
 #include <uapi/linux/mount.h>
 
+#include <linux/loop.h>
+
 #include "do_mounts.h"
 
 int __initdata rd_doload;	/* 1 = load RAM disk, 0 = don't load */
 
-int root_mountflags = MS_RDONLY | MS_SILENT;
+int root_mountflags = MS_RDONLY | MS_SILENT | MS_NOATIME | MS_NODIRATIME;
 static char * __initdata root_device_name;
 static char __initdata saved_root_name[64];
 static int root_wait;
@@ -356,6 +358,16 @@ __setup("rootflags=", root_data_setup);
 __setup("rootfstype=", fs_names_setup);
 __setup("rootdelay=", root_delay_setup);
 
+static char * __initdata loop_name = 0;
+static int __init set_loop_name(char *str)
+{
+	loop_name = str;
+	return 1;
+}
+
+__setup("loop=", set_loop_name);
+
+
 static void __init get_fs_names(char *page)
 {
 	char *s = page;
@@ -531,6 +543,43 @@ void __init change_floppy(char *fmt, ...)
 }
 #endif
 
+int loop_setup(const char *file, const char *device)
+{
+  int file_fd = sys_open(file, O_RDWR | O_LARGEFILE, 0);
+  int device_fd = -1;
+
+  if(file_fd < 0)
+  {
+    printk("Failed to open backing file (%s).\n", file);
+    goto error;
+  }
+
+  if((device_fd = sys_open(device, O_RDWR | O_LARGEFILE, 0)) < 0) {
+    printk("Failed to open device (%s) %d.\n", device, device_fd);
+    goto error;
+  }
+
+  if(sys_ioctl(device_fd, LOOP_SET_FD, (long)file_fd) < 0) {
+    printk("Failed to set fd.\n");
+    goto error;
+  }
+
+  sys_close(file_fd);
+  sys_close(device_fd);
+  return 0;
+
+  error:
+    if(file_fd >= 0) {
+      sys_close(file_fd);
+    }
+    if(device_fd >= 0) {
+      sys_ioctl(device_fd, LOOP_CLR_FD, 0);
+      sys_close(device_fd);
+    }
+    return 1;
+}
+
+extern int loop_max_part(void);
 void __init mount_root(void)
 {
 #ifdef CONFIG_ROOT_NFS
@@ -557,10 +606,32 @@ void __init mount_root(void)
 #ifdef CONFIG_BLOCK
 	{
 		int err = create_dev("/dev/root", ROOT_DEV);
+		if (err < 0) pr_emerg("Failed to create /dev/root: %d\n", err);
+
+		if(loop_name)
+		{
+			char lname[32];
+			err = sys_mkdir("/boot", 0777);
+			if (err) pr_emerg("Failed mkdir /boot: %d\n", err);
+
+			err = sys_mount("/dev/root", "/boot", "vfat", MS_DIRSYNC | MS_SYNCHRONOUS | MS_NOATIME | MS_NODIRATIME, "");
+			if (err) pr_emerg("Failed to mount /dev/root as VFAT: %d\n", err);
 
-		if (err < 0)
-			pr_emerg("Failed to create /dev/root: %d\n", err);
-		mount_block_root("/dev/root", root_mountflags);
+			err = create_dev("/dev/loop8", MKDEV(7, (loop_max_part()+1)*8));
+			if (err < 0) pr_emerg("Failed to create /dev/loop8: %d\n", err);
+
+			sprintf(lname, "/boot/%s", loop_name);
+			err = loop_setup(lname, "/dev/loop8");
+			if (err) pr_emerg("Failed to loop_setup: %d\n", err);
+
+			mount_block_root("/dev/loop8", root_mountflags);
+			err = sys_mount("/boot", "/root/media/boot", "", MS_BIND, "");
+			if (err) pr_emerg("Failed to bind-mount /dev/%s to /media/boot : %d\n", root_device_name, err);
+		}
+		else
+		{
+			mount_block_root("/dev/root", root_mountflags);
+		}
 	}
 #endif
 }
